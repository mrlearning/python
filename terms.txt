> Объектно-ориентированное программирование - Подход к программированию, при котором программа представляет собой набор объектов, которые взаимодействуют посредством методов и хранят своё состояние в полях свойств. ООП включает следующие понятия: абстакция, инкапсуляция, наследование, полиморфизм.

> Абстракция - Выделение у объекта общих основополагающих характеристик, отличающих его от других объектов. Задача состоит в отделении этих характеристик от менее важных деталей реализаци в виде более простых объектов.
Например, если спросить себя, что такое автомобиль, то мы примерно определим его как средство наземного передвижения, у которого есть корпус (кузов), руль, место для размещения водителя, колёса (4 и более) и система, заставляющая колёса крутиться. Но нас при составлении определения мало интересует: какой формы и из чего сделан корпус, какого размера руль, количество пассажирских мест, камерные или безкамерные колёса, тип двигаетеля и т.п.

> Инкапсуляция - Механизм, позволяющий объединить внутри класса данные и методы (работающие с данными), и скрыть детали реализации от пользователя.

> Наследование - Механизм, позволяющий создать новый класс на основе уже существующего. Потомственный класс может полностью или частично заимствовать функционал родительского, а так же расширять его.

> Полиморфизм - Возможность использовать объекты с одинаковым интерфейсом без информации о их типе и внутренней структуре. Смысл можно выразить фразой «Один интерфейс - множество реализаций».

> Класс - Представляет собой, описанную языком программирования, модель ("чертёж") ещё не существующего объекта.

> Объект - Сущность в адресном пространстве вычислительной системы, появляющаяся при создании экземпляра класса.

> Рекурсия - Вызов методом самого себя.

> Пакет - Пространство имён, которое организует набор родственных классов и интерфейсов.

> Конструктор - Блок инструкций, вызываемый при создании объекта класса. Конструктор не имеет, определённого явным образом, типа возвращаемых данных и не наследуется.

> API - Application programming interface - набор готовых классов, методов, структур и констант, предоставляемых библиотекой/сервисом для использования во внешних программных продуктах.

> Абстрактный метод - Метод, определяющий параметры и тип возвращаемого значения, но не имеющий реализации.

> Абстрактный класс - Класс, содержащий абстрактные методы. Не может иметь объектов.

> Вложенный класс - Класс, определённый внутри другого класса.

> Низкоуровневый язык программирования - язык программирования, близкий к программированию непосредственно в машинных кодах используемого реального или виртуального процессора.

> Высокоуровневый язык программирования - язык программирования, разработанный для быстроты и удобства использования программистом. Основная черта высокоуровневых языков — это абстракция, то есть введение смысловых конструкций, кратко описывающих такие структуры данных и операции над ними, описания которых на машинном коде (или другом низкоуровневом языке программирования) очень длинны и сложны для понимания.

> Трансляция - преобразование программы с одного языка программирования на другой.

> Интерпретация - покомандный/построчный анализ, обработка и выполнение исходного кода 

> Интерпретатор - программа или аппаратное средство, выполняющее интерпретацию.

> Простой интерпретатор - анализирует и тут же выполняет программу покомандно. Мгновенная реакция, но ошибки обнаруживаются только при попытке выполнить команду.

> Интерпретатор компилирующего типа (виртуальная машина) - система из компилятора, преобразующего исх. код в код, понятный интерпретатору, и собственно интерпретатора, выполняющего этот код. Большее быстродействие за счёт минимизации необходимого анализа кода при интерпретации.

> Абсолютный код (позиционно-зависимый) — программный код, привязанный к определённым ячейкам памяти, пригоден для прямого выполнения процессором.

> Позиционно-независимый код - программа, которая может быть размещена в любой области памяти и в любой момент перемещена в другую область памяти, так как все ссылки на ячейки памяти в ней относительные

> Компиляция - преобразование программы на высокоуровневом языке в эквивалентную программу на низкоуровневом языке близком к машинному коду.

> Машинный код - набор команд, интерпретируемых непосредственно процессором

> Ассоциативный массив (словарь) — абстрактный тип данных (интерфейс), позволяющий хранить пары вида ключ->значение и поддерживающий операции добавления пары, поиска и удаления пары по ключу

> Хеш-таблица - это структура данных, реализующая интерфейс ассоциативного массива, а именно, она позволяет хранить пары (ключ, значение) и выполнять три операции: операцию добавления новой пары, операцию поиска и операцию удаления пары по ключу. Значения хранятся в массиве, доступ осуществляется по индексу, вычисляемому хеш-функцией на основе ключа. В среднем все опреации (поиск, вставка, удаление элементов) выполняются за время О(1), но не гарантируется, что время выполнения отдельной операции мало, т.к. при достижении некоторого "предельного" значения коэффициента заполнения выполняется операция перестроения хеш-таблицы (создание массива большего размера и заполнение его элементами с вычислением новых индексов).

> Коллизия - ситуация, когда для различных ключей получается одно и то же хеш-значение.

> Способы разрешения коллизий:
	1) Метод цепочек. В данном случае ячейка таблицы содержит не пару ключ-значение, а связный список пар ключ-значение, соответствующих одному и тому же хеш-значению ключа.
	2) Метод открытой адресации. В ячейках массива храняться сами пары ключ-начение. Если ячейка занята, то данные помещаются в следующую свободную ячейку, удалённую на некоторый интервал. Используют фиксированный интервал; интервал увеличивающийся с каждым шагом на константу; интервал, вычисляемый второй хеш-функцией (двойное хеширование).

> Хеширование - вычисление индекса (позиции) в массиве на основе ключа

> Буфер - область памяти, используемая для временного хранения данных при вводе или выводе. Буферы используются когда существует разница между скоростью получения данных и скоростью их обработки, или в случае когда эти скорости переменны, например, при буферизации печати.

> Область видимости - область программы, в пределах которой имя некоторой переменной продолжает быть связанным с этой переменной и возвращать её значение.

> Функция высшего порядка — функция, принимающая в качестве аргументов другие функции или возвращающая другую функцию в качестве результата.

> Замыкание - функция, определённая в теле другой функции и ссылающаяся на её локальные переменные.
-------Пример-------
def parent(name):
    hello = "Hello"
	def child():
	    print(hello, name)
	return child
	
sayHello = parent("Vasia")
sayHello()
#Hello Vasia
--------------------

> Декоратор - обёртка, позволяющая выполнить дополнительные команды при вызове функции, не изменяя саму функцию.
-------Пример-------
def decorator(func):
	def wrapper():
		print("Before")
		func()
		print("After")
	return wrapper
	
def myFunc():
	print("Main")
	
myFunc = decorator(myFunc)
myFunc()

#либо так
@decorator
def myFunc():
	print("Main")
	
myFunc()
--------------------

> Метакласс - класс, экземпляры которого в свою очередь являются классами.

> Лямбда-выражение — синтаксис для объявления небольших несложных анонимных объектов-функций.

> Способы добавить элемент в список
-------Пример-------
a = [1, 2, 3]
1) a.append(4)
2) a.extend([5])
3) a[len(a):len(a)] = [6]
4) a += [7]
5*) a = a + [8]
*Тут, в отличие от всех остальных вариантов, создан новый объект
--------------------

> Итератор - шаблон проектирования. Представляет собой объект, позволяющий получить последовательный доступ к элементам коллекции (массива или контейнера), не раскрывая её внутреннего представления. В терминах СУБД итераторы называют курсорами. В простейшем случае итератором в низкоуровневых языках является указатель.
-------Пример-------
a = [1, 2, 3]
b = iter(a)
#Теперь у b в отличие от a есть метод __next__()
print(b.__next__())
#1
print(b.__next__())
#2
print(b.__next__())
#3
print(b.__next__())
#StopIteration
--------------------

> Операнд - аргумент опрерации. Например для опреации сложения a + b, a и b - операнды.

> Ядро системы - центральная часть операционной системы, обеспечивающая приложениям координированный доступ к ресурсам компьютера.

> Контекст - объект и его окружение.

> Менеджеры контекста используются для управления ресурсами, а именно позволяют автоматизировать освобождение ресурсов. В python менеджер контекста реализан как объект с методами __enter__() и __exit___(). __enter__() выполняется при входе в блок with и возвращает ссылку на объект, которая присваивается переменной после ключевого слова as. __exit___() выполняется при выходе из контекста.

> Переменная - поименованная, либо адресуемая иным способом область памяти, адрес которой можно использовать для осуществления доступа к данным.

> Генератор - функция, позволяющая поочерёдно получать элементы последовательности, не создавая сразу всего набора элементов. Следующий элемент вычисляется при каждом новом вызове функции. Для создания генераторов используют функции, содержащие в своем теле ключевое слово «yield» — такие функции возвращают объект-генератор.
-------Пример-------
def mygen():
    a = 0
    while a < 10:
        a += 1
        yield a

for e in mygen():
    print(e)
--------------------

> Массив - структура данных в виде набора элементов, расположенных в памяти непосредственно друг за другом. Доступ к элементам осуществляется по индексу.

> Размерность массива — это количество индексов, необходимое для однозначного доступа к элементу массива.

> Cтруктура массива — количество размерностей плюс размер (протяжённость) массива для каждой размерности.

> Вектор - одномерный массив

> Стек - абстрактный тип данных, представляющий собой список элементов, организованных по принципу LIFO (англ. last in — first out, «последним пришёл — первым вышел»).

> Поток выполнения - наименьшая последовательность команд, которая может управляться независимо с помощью планировщика, входящего в состав операционной системы. Несколько потоков выполнения могут существовать в рамках одного и того же процесса и совместно использовать ресурсы, такие как память, тогда как процессы не разделяют этих ресурсов. В частности, потоки выполнения разделяют инструкции процесса (его код) и его контекст (значения переменных, которые они имеют в любой момент времени).

> Поток - некоторая структура с данными, обеспечивающая выполнение набора команд, отнесённых к данному потоку, таким образом, что выполнение может быть прервано и возобновлено с момента остановки. (???)

> Процесс - экземпляр компьютерной программы, выполняющийся в текущий момент.

> Различие между потоком и процессом. Потоки, существующие в рамках одного процесса, имеют общий доступ к его ресурсам: коду и контексту. Разные процессы не имеют доступа к ресурсам друг друга.

> Сборщик мусора - механизм автоматического управления памятью. Обеспечивает периодическое освобождение памяти, удаляя объекты, которые уже не будут востребованы приложениями.

> Серялизация - перевод какой-либо структуры данных в последовательность битов.

> Кэш - промежуточный буфер с быстрым доступом, содержащий информацию, которая может быть запрошена с наибольшей вероятностью.

> Виртуальный метод — метод класса, который может быть переопределён в классах-наследниках так, что конкретная реализация метода для вызова будет определяться во время исполнения.

> Вычислительная сложность — функция зависимости объёма работы, выполняемой алгоритмом, от времени (количества элементарных шагов) и количества выделяемой памяти.

> Устойчивый алгоритм сортировки - не меняет взаимного расположения элементов с одинаковыми ключами.

> Интерфейсы и абстрактные классы
	1) Интерфейс в отличие от абстрактного класса не может содержать поля и неабстрактные методы (но может содержать константы)
	2) Класс может реализовывать много интерфейсов, но наследоваться только от одного абстрактного класса (java)
	3) Интерфейс - это льшь список методов для произвольной реализации. Абстрактный класс нужен для создания группы классов, часть методов у которых имеет одинаковую реализацию, а потому нет необходимости каждый раз её описывать.

> Многопоточность - свойство платформы (операционной системы, виртуальной машины и т. д.) или приложения, состоящее в том, что процесс, порождённый в операционной системе, может состоять из нескольких потоков, выполняющихся «параллельно», то есть без предписанного порядка во времени.

> Алгоритмы сортировки
	1) Быстрая сортировка (худшее время: O(n^2), лучшее время: O(n*log(n)), доп. память: O(n))
	2) Сортировка выбором (худшее время: O(n^2), лучшее время: O(n^2), доп. память: O(1))
	3) Сортировка вставками (худшее время: O(n^2), лучшее время: O(n), доп. память: O(1))
	4) Сортировка пузырьком (худшее время: O(n^2), лучшее время: O(n), доп. память: O(1))
	5) Гномья сортировка (худшее время: O(n^), лучшее время: O(n), доп. память: O(1))
	6) Сортировка слиянием (время: O(n*log(n)), доп. память: O(n))
	7) Сортировка Шелла (худшее время: O(n), лучшее время: O(n*log^2(n)), доп. память: O(1))

> Граф - объект, состоящий из вершин и соединяющих их рёбер.

> Дерево - связный граф, не содержащий циклов.

> Ориентированный граф - граф, рёбрам которого присвоено направление. Направленные рёбра именуются дугами.

> Куча - структура данных типа дерево, которая удовлетворяет условию: значение (ключ) потомственного узла не превышает (или не меньше) родительского. Куча является максимально эффективной реализацией абстрактного типа данных "очередь с приоритетом".

> Динамическая типизация - приём, используемый в языках программирования, при котором переменная связывается с типом в момент присваивания значения, а не в момент объявления переменной. 

> Амортизированная сложность
> Многозадачность
> Диспетчеризация
> Сопроцессы
> Семафор
> Синглтон

