> Трансляция - преобразование программы с одного языка программирования на другой.
> Интерпретация - покомандный/построчный анализ, обработка и выполнение исходного кода 
> Интерпретатор - программа или аппаратное средство, выполняющее интерпретацию.
> Простой интерпретатор - анализирует и тут же выполняет программу покомандно. Мгновенная реакция, но ошибки обнаруживаются только при попытке выполнить команду.
> Интерпретатор компилирующего типа (виртуальная машина) - система из компилятора, преобразующего исх. код в код, понятный интерпретатору, и собственно интерпретатора, выполняющего этот код. Большее быстродействие за счёт минимизации необходимого анализа кода при интерпретации.
> Абсолютный код (позиционно-зависимый) — программный код, пригодный для прямого выполнения процессором, привязан к определённым ячейкам памяти
> Позиционно-независимый код - программа, которая может быть размещена в любой области памяти и в любой момент перемещена в другую область памяти, так как все ссылки на ячейки памяти в ней относительные
> Компиляция - преобразование программы на высокоуровневом языке в эквивалентную программу на низкоуровневом языке близком к машинному коду.
> Машинный код - набор команд, интерпретируемых непосредственно процессором
> Ассоциативный массив (словарь) — абстрактный тип данных (интерфейс), позволяющий хранить пары вида ключ->значение и поддерживающий операции добавления пары, а также поиска и удаления пары по ключу
> Хеш-таблица - это структура данных, реализующая интерфейс ассоциативного массива, а именно, она позволяет хранить пары (ключ, значение) и выполнять три операции: операцию добавления новой пары, операцию поиска и операцию удаления пары по ключу. Значения хранятся в массиве, доступ осуществляется по индексу, вычисляемому хеш-функцией на основе ключа. В среднем все опреации (поиск, вставка, удаление элементов) выполняются за время О(1), но не гарантируется, что время выполнения отдельной операции мало, т.к. при достижении некоторого "предельного" значения коэффициента заполнения выполняется операция перестроения хеш-таблицы (создание массива большего размера и заполнение его элементами с вычислением новых индексов).
> Хеширование - вычисление индекса (позиции) в массиве на основе ключа
> Буфер - область памяти, используемая для временного хранения данных при вводе или выводе. Буферы используются когда существует разница между скоростью получения данных и скоростью их обработки, или в случае когда эти скорости переменны, например, при буферизации печати.
> Область видимости - область программы, в пределах которой имя некоторой переменной продолжает быть связанным с этой переменной и возвращать её значение. [Не вполне понятно, что такое область программы]
> Функция высшего порядка — функция, принимающая в качестве аргументов другие функции или возвращающая другую функцию в качестве результата.
> Замыкание - функция, определённая в теле другой функции и ссылающаяся на её локальные переменные.
-------Пример-------
def parent(name):
    hello = "Hello"
	def child():
	    print(hello, name)
	return child
	
sayHello = parent("Vasia")
sayHello()
#Hello Vasia
--------------------
> Декоратор - обёртка, позволяющая выполнить дополнительные команды при вызове функции, не изменяя саму функцию.
-------Пример-------
def decorator(func):
	def wrapper():
		print("Before")
		func()
		print("After")
	return wrapper
	
def myFunc():
	print("Main")
	
myFunc = decorator(myFunc)
myFunc()

#либо так
@decorator
def myFunc():
	print("Main")
	
myFunc()
--------------------
> Лямбда-выражение
> Сборщик мусора
> Серялизация
> Стек
> Кэш
> Виртуальные методы